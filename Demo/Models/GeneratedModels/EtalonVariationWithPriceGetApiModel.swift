//
// EtalonVariationWithPriceGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EtalonVariationWithPriceGetApiModel: Codable {

    public var priceOptions: [EtalonVariationPriceOptionLightApiModel]?
    public var id: Int?
    public var price: Double?
    public var reserved: Bool?
    public var production: Bool?
    public var innerId: String?
    public var description: String?
    public var dateAdded: String?
    public var params: [String:Any]?
    
    
    
    public init(priceOptions: [EtalonVariationPriceOptionLightApiModel]?, id: Int?, price: Double?, reserved: Bool?, production: Bool?, innerId: String?, description: String?, dateAdded: String?) {
        self.priceOptions = priceOptions
        self.id = id
        self.price = price
        self.reserved = reserved
        self.production = production
        self.innerId = innerId
        self.description = description
        self.dateAdded = dateAdded
        
        self.params = nil
    }
    
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(priceOptions, forKey: "PriceOptions")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(price, forKey: "Price")
        try container.encodeIfPresent(reserved, forKey: "Reserved")
        try container.encodeIfPresent(production, forKey: "Production")
        try container.encodeIfPresent(innerId, forKey: "InnerId")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(dateAdded, forKey: "DateAdded")
        
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        priceOptions = try container.decodeIfPresent([EtalonVariationPriceOptionLightApiModel].self, forKey: "PriceOptions")
        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        price = try container.decodeIfPresent(Double.self, forKey: "Price")
        reserved = try container.decodeIfPresent(Bool.self, forKey: "Reserved")
        production = try container.decodeIfPresent(Bool.self, forKey: "Production")
        innerId = try container.decodeIfPresent(String.self, forKey: "InnerId")
        description = try container.decodeIfPresent(String.self, forKey: "Description")
        dateAdded = try container.decodeIfPresent(String.self, forKey: "DateAdded")
        params = try container.decodeIfPresent(AnyDecodable.self, forKey: "Options")?.value as? [String:Any]
        
    }
}

