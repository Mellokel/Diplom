//
// DistributionPointEditApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DistributionPointEditApiModel: Codable {

    public var isReported: Bool?
    public var cityId: Int?
    public var streetName: String?
    public var houseNumber: String?
    public var liablePersonPhone: String?
    public var emailAddress: String?


    
    public init(isReported: Bool?, cityId: Int?, streetName: String?, houseNumber: String?, liablePersonPhone: String?, emailAddress: String?) {
        self.isReported = isReported
        self.cityId = cityId
        self.streetName = streetName
        self.houseNumber = houseNumber
        self.liablePersonPhone = liablePersonPhone
        self.emailAddress = emailAddress
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(isReported, forKey: "IsReported")
        try container.encodeIfPresent(cityId, forKey: "CityId")
        try container.encodeIfPresent(streetName, forKey: "StreetName")
        try container.encodeIfPresent(houseNumber, forKey: "HouseNumber")
        try container.encodeIfPresent(liablePersonPhone, forKey: "LiablePersonPhone")
        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        isReported = try container.decodeIfPresent(Bool.self, forKey: "IsReported")
        cityId = try container.decodeIfPresent(Int.self, forKey: "CityId")
        streetName = try container.decodeIfPresent(String.self, forKey: "StreetName")
        houseNumber = try container.decodeIfPresent(String.self, forKey: "HouseNumber")
        liablePersonPhone = try container.decodeIfPresent(String.self, forKey: "LiablePersonPhone")
        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
    }
}

