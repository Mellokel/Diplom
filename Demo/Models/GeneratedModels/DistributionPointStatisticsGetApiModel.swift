//
// DistributionPointStatisticsGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DistributionPointStatisticsGetApiModel: Codable {

    public var requests: Int?
    public var clients: Int?
    public var orders: Int?
    public var conversionRate: Double?
    public var income: Double?
    public var serviceFee: Double?
    public var sellers: [DistributionPointSellerStatisticsGetApiModel]?


    
    public init(requests: Int?, clients: Int?, orders: Int?, conversionRate: Double?, income: Double?, serviceFee: Double?, sellers: [DistributionPointSellerStatisticsGetApiModel]?) {
        self.requests = requests
        self.clients = clients
        self.orders = orders
        self.conversionRate = conversionRate
        self.income = income
        self.serviceFee = serviceFee
        self.sellers = sellers
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(requests, forKey: "Requests")
        try container.encodeIfPresent(clients, forKey: "Clients")
        try container.encodeIfPresent(orders, forKey: "Orders")
        try container.encodeIfPresent(conversionRate, forKey: "ConversionRate")
        try container.encodeIfPresent(income, forKey: "Income")
        try container.encodeIfPresent(serviceFee, forKey: "ServiceFee")
        try container.encodeIfPresent(sellers, forKey: "Sellers")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        requests = try container.decodeIfPresent(Int.self, forKey: "Requests")
        clients = try container.decodeIfPresent(Int.self, forKey: "Clients")
        orders = try container.decodeIfPresent(Int.self, forKey: "Orders")
        conversionRate = try container.decodeIfPresent(Double.self, forKey: "ConversionRate")
        income = try container.decodeIfPresent(Double.self, forKey: "Income")
        serviceFee = try container.decodeIfPresent(Double.self, forKey: "ServiceFee")
        sellers = try container.decodeIfPresent([DistributionPointSellerStatisticsGetApiModel].self, forKey: "Sellers")
    }
}

