//
// UploadedFileGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UploadedFileGetApiModel: Codable {

    public var id: UUID?
    public var originalName: String?
    public var _extension: String?
    public var size: Int64?
    public var hash: String?
    public var configuration: String?
    public var configurationVersion: Int?


    
    public init(id: UUID?, originalName: String?, _extension: String?, size: Int64?, hash: String?, configuration: String?, configurationVersion: Int?) {
        self.id = id
        self.originalName = originalName
        self._extension = _extension
        self.size = size
        self.hash = hash
        self.configuration = configuration
        self.configurationVersion = configurationVersion
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(originalName, forKey: "OriginalName")
        try container.encodeIfPresent(_extension, forKey: "Extension")
        try container.encodeIfPresent(size, forKey: "Size")
        try container.encodeIfPresent(hash, forKey: "Hash")
        try container.encodeIfPresent(configuration, forKey: "Configuration")
        try container.encodeIfPresent(configurationVersion, forKey: "ConfigurationVersion")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "Id")
        originalName = try container.decodeIfPresent(String.self, forKey: "OriginalName")
        _extension = try container.decodeIfPresent(String.self, forKey: "Extension")
        size = try container.decodeIfPresent(Int64.self, forKey: "Size")
        hash = try container.decodeIfPresent(String.self, forKey: "Hash")
        configuration = try container.decodeIfPresent(String.self, forKey: "Configuration")
        configurationVersion = try container.decodeIfPresent(Int.self, forKey: "ConfigurationVersion")
    }
}

