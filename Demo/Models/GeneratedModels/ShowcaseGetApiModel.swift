//
// ShowcaseGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ShowcaseGetApiModel: Codable {

    public var id: Int?
    public var supplierId: Int?
    public var name: String?
    public var imageId: UUID?
    public var productionOnly: Bool?
    public var requireConsolidation: Bool?


    
    public init(id: Int?, supplierId: Int?, name: String?, imageId: UUID?, productionOnly: Bool?, requireConsolidation: Bool?) {
        self.id = id
        self.supplierId = supplierId
        self.name = name
        self.imageId = imageId
        self.productionOnly = productionOnly
        self.requireConsolidation = requireConsolidation
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(supplierId, forKey: "SupplierId")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(imageId, forKey: "ImageId")
        try container.encodeIfPresent(productionOnly, forKey: "ProductionOnly")
        try container.encodeIfPresent(requireConsolidation, forKey: "RequireConsolidation")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        supplierId = try container.decodeIfPresent(Int.self, forKey: "SupplierId")
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        imageId = try container.decodeIfPresent(UUID.self, forKey: "ImageId")
        productionOnly = try container.decodeIfPresent(Bool.self, forKey: "ProductionOnly")
        requireConsolidation = try container.decodeIfPresent(Bool.self, forKey: "RequireConsolidation")
    }
}

