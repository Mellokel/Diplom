//
// EtalonWithVariationsGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EtalonWithVariationsGetApiModel: Codable {

    public var variations: [EtalonVariationGetApiModel]?
    public var id: Int?
    public var name: String?
    public var description: String?
    public var article: String?
    public var imageId: UUID?
    public var commodityCategoryId: Int?
    public var supplierCategoryId: Int?
    public var manufacturingMargin: Double?
    public var storageMargin: Double?
    public var currencyId: Int?
    public var orderUnitId: Int?
    public var quantityMinimum: Double?
    public var quantityStep: Double?
    public var quantityMaximum: Double?
    public var disabled: Bool?
    public var options: [String:Any]?


    
    public init(variations: [EtalonVariationGetApiModel]?, id: Int?, name: String?, description: String?, article: String?, imageId: UUID?, commodityCategoryId: Int?, supplierCategoryId: Int?, manufacturingMargin: Double?, storageMargin: Double?, currencyId: Int?, orderUnitId: Int?, quantityMinimum: Double?, quantityStep: Double?, quantityMaximum: Double?, disabled: Bool?, options: [String:Any]?) {
        self.variations = variations
        self.id = id
        self.name = name
        self.description = description
        self.article = article
        self.imageId = imageId
        self.commodityCategoryId = commodityCategoryId
        self.supplierCategoryId = supplierCategoryId
        self.manufacturingMargin = manufacturingMargin
        self.storageMargin = storageMargin
        self.currencyId = currencyId
        self.orderUnitId = orderUnitId
        self.quantityMinimum = quantityMinimum
        self.quantityStep = quantityStep
        self.quantityMaximum = quantityMaximum
        self.disabled = disabled
        self.options = options
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(variations, forKey: "Variations")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(article, forKey: "Article")
        try container.encodeIfPresent(imageId, forKey: "ImageId")
        try container.encodeIfPresent(commodityCategoryId, forKey: "CommodityCategoryId")
        try container.encodeIfPresent(supplierCategoryId, forKey: "SupplierCategoryId")
        try container.encodeIfPresent(manufacturingMargin, forKey: "ManufacturingMargin")
        try container.encodeIfPresent(storageMargin, forKey: "StorageMargin")
        try container.encodeIfPresent(currencyId, forKey: "CurrencyId")
        try container.encodeIfPresent(orderUnitId, forKey: "OrderUnitId")
        try container.encodeIfPresent(quantityMinimum, forKey: "QuantityMinimum")
        try container.encodeIfPresent(quantityStep, forKey: "QuantityStep")
        try container.encodeIfPresent(quantityMaximum, forKey: "QuantityMaximum")
        try container.encodeIfPresent(disabled, forKey: "Disabled")
        try container.encodeIfPresent(options, forKey: "Options")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        variations = try container.decodeIfPresent([EtalonVariationGetApiModel].self, forKey: "Variations")
        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        description = try container.decodeIfPresent(String.self, forKey: "Description")
        article = try container.decodeIfPresent(String.self, forKey: "Article")
        imageId = try container.decodeIfPresent(UUID.self, forKey: "ImageId")
        commodityCategoryId = try container.decodeIfPresent(Int.self, forKey: "CommodityCategoryId")
        supplierCategoryId = try container.decodeIfPresent(Int.self, forKey: "SupplierCategoryId")
        manufacturingMargin = try container.decodeIfPresent(Double.self, forKey: "ManufacturingMargin")
        storageMargin = try container.decodeIfPresent(Double.self, forKey: "StorageMargin")
        currencyId = try container.decodeIfPresent(Int.self, forKey: "CurrencyId")
        orderUnitId = try container.decodeIfPresent(Int.self, forKey: "OrderUnitId")
        quantityMinimum = try container.decodeIfPresent(Double.self, forKey: "QuantityMinimum")
        quantityStep = try container.decodeIfPresent(Double.self, forKey: "QuantityStep")
        quantityMaximum = try container.decodeIfPresent(Double.self, forKey: "QuantityMaximum")
        disabled = try container.decodeIfPresent(Bool.self, forKey: "Disabled")
        //options = try container.decodeIfPresent([String:Any].self, forKey: "Options")
    }
}

