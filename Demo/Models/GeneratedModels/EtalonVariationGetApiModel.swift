//
// EtalonVariationGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EtalonVariationGetApiModel: Codable {

    public var id: Int?
    public var price: Double?
    public var reserved: Bool?
    public var production: Bool?
    public var innerId: String?
    public var description: String?
    public var dateAdded: String?
    public var options: [String:Any]?


    
    public init(id: Int?, price: Double?, reserved: Bool?, production: Bool?, innerId: String?, description: String?, dateAdded: String?, options: [String:Any]?) {
        self.id = id
        self.price = price
        self.reserved = reserved
        self.production = production
        self.innerId = innerId
        self.description = description
        self.dateAdded = dateAdded
        self.options = options
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(price, forKey: "Price")
        try container.encodeIfPresent(reserved, forKey: "Reserved")
        try container.encodeIfPresent(production, forKey: "Production")
        try container.encodeIfPresent(innerId, forKey: "InnerId")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(dateAdded, forKey: "DateAdded")
        try container.encodeIfPresent(options, forKey: "Options")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        price = try container.decodeIfPresent(Double.self, forKey: "Price")
        reserved = try container.decodeIfPresent(Bool.self, forKey: "Reserved")
        production = try container.decodeIfPresent(Bool.self, forKey: "Production")
        innerId = try container.decodeIfPresent(String.self, forKey: "InnerId")
        description = try container.decodeIfPresent(String.self, forKey: "Description")
        dateAdded = try container.decodeIfPresent(String.self, forKey: "DateAdded")
        options = try container.decodeIfPresent(AnyDecodable.self, forKey: "Options")?.value as? [String:Any]
    }
}

