//
// CommodityOptionFieldGetApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CommodityOptionFieldGetApiModel: Codable {

    public enum ModelType: String, Codable { 
        case string = "String"
        case boolean = "Boolean"
        case integer = "Integer"
        case floatingPoint = "FloatingPoint"
        case dateTime = "DateTime"
        case enumeration = "Enumeration"
    }
    public var id: Int?
    public var uniqueKey: String?
    public var name: String?
    public var smsName: String?
    public var type: ModelType?
    public var parameters: ParametersForCOFGAM?
    
    public var measurementUnit: MeasurementUnit?
    public var concurrencyToken: UUID?

    public struct ParametersForCOFGAM: Codable {
        var minValue: Double?
        var maxValue: Double?
        
        enum CodingKeys: String, CodingKey {
            case minValue = "MinValue"
            case maxValue = "MaxValue"
        }
    }
    
    public init(id: Int?, uniqueKey: String?, name: String?, smsName: String?, type: ModelType?, parameters: ParametersForCOFGAM?, measurementUnit: MeasurementUnit?, concurrencyToken: UUID?) {
        self.id = id
        self.uniqueKey = uniqueKey
        self.name = name
        self.smsName = smsName
        self.type = type
        self.parameters = parameters
        self.measurementUnit = measurementUnit
        self.concurrencyToken = concurrencyToken
       
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(uniqueKey, forKey: "UniqueKey")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(smsName, forKey: "SmsName")
        try container.encodeIfPresent(type, forKey: "Type")
        //try container.encodeIfPresent(parameters, forKey: "Parameters")
        try container.encodeIfPresent(measurementUnit, forKey: "MeasurementUnit")
        try container.encodeIfPresent(concurrencyToken, forKey: "ConcurrencyToken")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        uniqueKey = try container.decodeIfPresent(String.self, forKey: "UniqueKey")
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        smsName = try container.decodeIfPresent(String.self, forKey: "SmsName")
        type = try container.decodeIfPresent(ModelType.self, forKey: "Type")
        parameters = try container.decodeIfPresent(ParametersForCOFGAM.self, forKey: "Parameters")
        measurementUnit = try container.decodeIfPresent(MeasurementUnit.self, forKey: "MeasurementUnit")
        concurrencyToken = try container.decodeIfPresent(UUID.self, forKey: "ConcurrencyToken")
        
       
    }
}

