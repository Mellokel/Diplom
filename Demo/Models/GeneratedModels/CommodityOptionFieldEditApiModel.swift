//
// CommodityOptionFieldEditApiModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CommodityOptionFieldEditApiModel: Codable {

    public enum ModelType: String, Codable { 
        case string = "String"
        case boolean = "Boolean"
        case integer = "Integer"
        case floatingPoint = "FloatingPoint"
        case dateTime = "DateTime"
        case enumeration = "Enumeration"
    }
    public var uniqueKey: String
    public var name: String
    public var smsName: String?
    public var type: ModelType?
    public var parameters: [String:Any]?
    public var measurementUnitId: Int?
    public var concurrencyToken: UUID?


    
    public init(uniqueKey: String, name: String, smsName: String?, type: ModelType?, parameters: [String:Any]?, measurementUnitId: Int?, concurrencyToken: UUID?) {
        self.uniqueKey = uniqueKey
        self.name = name
        self.smsName = smsName
        self.type = type
        self.parameters = parameters
        self.measurementUnitId = measurementUnitId
        self.concurrencyToken = concurrencyToken
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(uniqueKey, forKey: "UniqueKey")
        try container.encode(name, forKey: "Name")
        try container.encodeIfPresent(smsName, forKey: "SmsName")
        try container.encodeIfPresent(type, forKey: "Type")
        try container.encodeIfPresent(parameters, forKey: "Parameters")
        try container.encodeIfPresent(measurementUnitId, forKey: "MeasurementUnitId")
        try container.encodeIfPresent(concurrencyToken, forKey: "ConcurrencyToken")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        uniqueKey = try container.decode(String.self, forKey: "UniqueKey")
        name = try container.decode(String.self, forKey: "Name")
        smsName = try container.decodeIfPresent(String.self, forKey: "SmsName")
        type = try container.decodeIfPresent(ModelType.self, forKey: "Type")
        //parameters = try container.decodeIfPresent([String:Any].self, forKey: "Parameters")
        measurementUnitId = try container.decodeIfPresent(Int.self, forKey: "MeasurementUnitId")
        concurrencyToken = try container.decodeIfPresent(UUID.self, forKey: "ConcurrencyToken")
    }
}

